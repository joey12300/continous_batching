// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: continuous_batcher.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_continuous_5fbatcher_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_continuous_5fbatcher_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_continuous_5fbatcher_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_continuous_5fbatcher_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_continuous_5fbatcher_2eproto;
namespace continuous_batching {
class BatchingReply;
struct BatchingReplyDefaultTypeInternal;
extern BatchingReplyDefaultTypeInternal _BatchingReply_default_instance_;
class BatchingRequest;
struct BatchingRequestDefaultTypeInternal;
extern BatchingRequestDefaultTypeInternal _BatchingRequest_default_instance_;
}  // namespace continuous_batching
PROTOBUF_NAMESPACE_OPEN
template<> ::continuous_batching::BatchingReply* Arena::CreateMaybeMessage<::continuous_batching::BatchingReply>(Arena*);
template<> ::continuous_batching::BatchingRequest* Arena::CreateMaybeMessage<::continuous_batching::BatchingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace continuous_batching {

// ===================================================================

class BatchingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:continuous_batching.BatchingRequest) */ {
 public:
  inline BatchingRequest() : BatchingRequest(nullptr) {}
  ~BatchingRequest() override;
  explicit constexpr BatchingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchingRequest(const BatchingRequest& from);
  BatchingRequest(BatchingRequest&& from) noexcept
    : BatchingRequest() {
    *this = ::std::move(from);
  }

  inline BatchingRequest& operator=(const BatchingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchingRequest& operator=(BatchingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchingRequest* internal_default_instance() {
    return reinterpret_cast<const BatchingRequest*>(
               &_BatchingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchingRequest& a, BatchingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "continuous_batching.BatchingRequest";
  }
  protected:
  explicit BatchingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeedNumFieldNumber = 1,
  };
  // int32 need_num = 1;
  void clear_need_num();
  int32_t need_num() const;
  void set_need_num(int32_t value);
  private:
  int32_t _internal_need_num() const;
  void _internal_set_need_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:continuous_batching.BatchingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t need_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_continuous_5fbatcher_2eproto;
};
// -------------------------------------------------------------------

class BatchingReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:continuous_batching.BatchingReply) */ {
 public:
  inline BatchingReply() : BatchingReply(nullptr) {}
  ~BatchingReply() override;
  explicit constexpr BatchingReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchingReply(const BatchingReply& from);
  BatchingReply(BatchingReply&& from) noexcept
    : BatchingReply() {
    *this = ::std::move(from);
  }

  inline BatchingReply& operator=(const BatchingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchingReply& operator=(BatchingReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchingReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchingReply* internal_default_instance() {
    return reinterpret_cast<const BatchingReply*>(
               &_BatchingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchingReply& a, BatchingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchingReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchingReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchingReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchingReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchingReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchingReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "continuous_batching.BatchingReply";
  }
  protected:
  explicit BatchingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActualBatchSizeFieldNumber = 1,
  };
  // int32 actual_batch_size = 1;
  void clear_actual_batch_size();
  int32_t actual_batch_size() const;
  void set_actual_batch_size(int32_t value);
  private:
  int32_t _internal_actual_batch_size() const;
  void _internal_set_actual_batch_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:continuous_batching.BatchingReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t actual_batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_continuous_5fbatcher_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchingRequest

// int32 need_num = 1;
inline void BatchingRequest::clear_need_num() {
  need_num_ = 0;
}
inline int32_t BatchingRequest::_internal_need_num() const {
  return need_num_;
}
inline int32_t BatchingRequest::need_num() const {
  // @@protoc_insertion_point(field_get:continuous_batching.BatchingRequest.need_num)
  return _internal_need_num();
}
inline void BatchingRequest::_internal_set_need_num(int32_t value) {
  
  need_num_ = value;
}
inline void BatchingRequest::set_need_num(int32_t value) {
  _internal_set_need_num(value);
  // @@protoc_insertion_point(field_set:continuous_batching.BatchingRequest.need_num)
}

// -------------------------------------------------------------------

// BatchingReply

// int32 actual_batch_size = 1;
inline void BatchingReply::clear_actual_batch_size() {
  actual_batch_size_ = 0;
}
inline int32_t BatchingReply::_internal_actual_batch_size() const {
  return actual_batch_size_;
}
inline int32_t BatchingReply::actual_batch_size() const {
  // @@protoc_insertion_point(field_get:continuous_batching.BatchingReply.actual_batch_size)
  return _internal_actual_batch_size();
}
inline void BatchingReply::_internal_set_actual_batch_size(int32_t value) {
  
  actual_batch_size_ = value;
}
inline void BatchingReply::set_actual_batch_size(int32_t value) {
  _internal_set_actual_batch_size(value);
  // @@protoc_insertion_point(field_set:continuous_batching.BatchingReply.actual_batch_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace continuous_batching

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_continuous_5fbatcher_2eproto
