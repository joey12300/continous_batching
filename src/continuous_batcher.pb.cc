// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: continuous_batcher.proto

#include "continuous_batcher.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace continuous_batching {
constexpr BatchingRequest::BatchingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : need_num_(0){}
struct BatchingRequestDefaultTypeInternal {
  constexpr BatchingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchingRequestDefaultTypeInternal() {}
  union {
    BatchingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchingRequestDefaultTypeInternal _BatchingRequest_default_instance_;
constexpr BatchingReply::BatchingReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actual_batch_size_(0){}
struct BatchingReplyDefaultTypeInternal {
  constexpr BatchingReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchingReplyDefaultTypeInternal() {}
  union {
    BatchingReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchingReplyDefaultTypeInternal _BatchingReply_default_instance_;
}  // namespace continuous_batching
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_continuous_5fbatcher_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_continuous_5fbatcher_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_continuous_5fbatcher_2eproto = nullptr;

const uint32_t TableStruct_continuous_5fbatcher_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::continuous_batching::BatchingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::continuous_batching::BatchingRequest, need_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::continuous_batching::BatchingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::continuous_batching::BatchingReply, actual_batch_size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::continuous_batching::BatchingRequest)},
  { 7, -1, -1, sizeof(::continuous_batching::BatchingReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::continuous_batching::_BatchingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::continuous_batching::_BatchingReply_default_instance_),
};

const char descriptor_table_protodef_continuous_5fbatcher_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030continuous_batcher.proto\022\023continuous_b"
  "atching\"#\n\017BatchingRequest\022\020\n\010need_num\030\001"
  " \001(\005\"*\n\rBatchingReply\022\031\n\021actual_batch_si"
  "ze\030\001 \001(\0052m\n\021ContinuousBatcher\022X\n\nGetNeed"
  "Num\022$.continuous_batching.BatchingReques"
  "t\032\".continuous_batching.BatchingReply\"\000b"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_continuous_5fbatcher_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_continuous_5fbatcher_2eproto = {
  false, false, 247, descriptor_table_protodef_continuous_5fbatcher_2eproto, "continuous_batcher.proto", 
  &descriptor_table_continuous_5fbatcher_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_continuous_5fbatcher_2eproto::offsets,
  file_level_metadata_continuous_5fbatcher_2eproto, file_level_enum_descriptors_continuous_5fbatcher_2eproto, file_level_service_descriptors_continuous_5fbatcher_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_continuous_5fbatcher_2eproto_getter() {
  return &descriptor_table_continuous_5fbatcher_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_continuous_5fbatcher_2eproto(&descriptor_table_continuous_5fbatcher_2eproto);
namespace continuous_batching {

// ===================================================================

class BatchingRequest::_Internal {
 public:
};

BatchingRequest::BatchingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:continuous_batching.BatchingRequest)
}
BatchingRequest::BatchingRequest(const BatchingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  need_num_ = from.need_num_;
  // @@protoc_insertion_point(copy_constructor:continuous_batching.BatchingRequest)
}

inline void BatchingRequest::SharedCtor() {
need_num_ = 0;
}

BatchingRequest::~BatchingRequest() {
  // @@protoc_insertion_point(destructor:continuous_batching.BatchingRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchingRequest::ArenaDtor(void* object) {
  BatchingRequest* _this = reinterpret_cast< BatchingRequest* >(object);
  (void)_this;
}
void BatchingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:continuous_batching.BatchingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  need_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 need_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          need_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:continuous_batching.BatchingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 need_num = 1;
  if (this->_internal_need_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_need_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:continuous_batching.BatchingRequest)
  return target;
}

size_t BatchingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:continuous_batching.BatchingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 need_num = 1;
  if (this->_internal_need_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_need_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchingRequest::GetClassData() const { return &_class_data_; }

void BatchingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchingRequest *>(to)->MergeFrom(
      static_cast<const BatchingRequest &>(from));
}


void BatchingRequest::MergeFrom(const BatchingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:continuous_batching.BatchingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_need_num() != 0) {
    _internal_set_need_num(from._internal_need_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchingRequest::CopyFrom(const BatchingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:continuous_batching.BatchingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchingRequest::IsInitialized() const {
  return true;
}

void BatchingRequest::InternalSwap(BatchingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(need_num_, other->need_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchingRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_continuous_5fbatcher_2eproto_getter, &descriptor_table_continuous_5fbatcher_2eproto_once,
      file_level_metadata_continuous_5fbatcher_2eproto[0]);
}

// ===================================================================

class BatchingReply::_Internal {
 public:
};

BatchingReply::BatchingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:continuous_batching.BatchingReply)
}
BatchingReply::BatchingReply(const BatchingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actual_batch_size_ = from.actual_batch_size_;
  // @@protoc_insertion_point(copy_constructor:continuous_batching.BatchingReply)
}

inline void BatchingReply::SharedCtor() {
actual_batch_size_ = 0;
}

BatchingReply::~BatchingReply() {
  // @@protoc_insertion_point(destructor:continuous_batching.BatchingReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchingReply::ArenaDtor(void* object) {
  BatchingReply* _this = reinterpret_cast< BatchingReply* >(object);
  (void)_this;
}
void BatchingReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:continuous_batching.BatchingReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actual_batch_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchingReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 actual_batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          actual_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchingReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:continuous_batching.BatchingReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 actual_batch_size = 1;
  if (this->_internal_actual_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actual_batch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:continuous_batching.BatchingReply)
  return target;
}

size_t BatchingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:continuous_batching.BatchingReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 actual_batch_size = 1;
  if (this->_internal_actual_batch_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actual_batch_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchingReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchingReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchingReply::GetClassData() const { return &_class_data_; }

void BatchingReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchingReply *>(to)->MergeFrom(
      static_cast<const BatchingReply &>(from));
}


void BatchingReply::MergeFrom(const BatchingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:continuous_batching.BatchingReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_actual_batch_size() != 0) {
    _internal_set_actual_batch_size(from._internal_actual_batch_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchingReply::CopyFrom(const BatchingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:continuous_batching.BatchingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchingReply::IsInitialized() const {
  return true;
}

void BatchingReply::InternalSwap(BatchingReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(actual_batch_size_, other->actual_batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchingReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_continuous_5fbatcher_2eproto_getter, &descriptor_table_continuous_5fbatcher_2eproto_once,
      file_level_metadata_continuous_5fbatcher_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace continuous_batching
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::continuous_batching::BatchingRequest* Arena::CreateMaybeMessage< ::continuous_batching::BatchingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::continuous_batching::BatchingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::continuous_batching::BatchingReply* Arena::CreateMaybeMessage< ::continuous_batching::BatchingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::continuous_batching::BatchingReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
